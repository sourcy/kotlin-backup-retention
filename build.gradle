buildscript {
    ext {
        kotlinVersion = '1.2.21'
        kotlinLoggingVersion = '1.4.9'
        springBootVersion = '2.0.0.RC1'
        commonsIOVersion = '2.6'
        junitPlatformVersion = '1.0.3'
        junitVersion = '5.0.3'
        junitExtensionsVersion = '1.1.0'
        assertJVersion = '3.9.0'
        arrowVersion = '0.6.1'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'io.sourcy'
version = '1.0'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    compile("io.github.microutils:kotlin-logging:${kotlinLoggingVersion}")

    compile('org.springframework.boot:spring-boot-starter')
    compile("org.springframework.boot:spring-boot-configuration-processor")

    compile("commons-io:commons-io:${commonsIOVersion}")

    compile("io.arrow-kt:arrow-core:${arrowVersion}")
    compile("io.arrow-kt:arrow-typeclasses:${arrowVersion}")
    compile("io.arrow-kt:arrow-data:${arrowVersion}")
    compile("io.arrow-kt:arrow-instances:${arrowVersion}")
    compile("io.arrow-kt:arrow-syntax:${arrowVersion}")
    kapt("io.arrow-kt:arrow-annotations-processor:${arrowVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit'
    }
    testCompile("org.assertj:assertj-core:${assertJVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testCompile("io.github.glytching:junit-extensions:${junitExtensionsVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}
